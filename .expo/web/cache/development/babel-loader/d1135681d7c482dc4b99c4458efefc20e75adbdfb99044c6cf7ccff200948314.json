{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { useEvent } from \"./utils\";\nimport { useSharedValue } from \"./useSharedValue\";\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nexport function useScrollViewOffset(aref) {\n  var offsetRef = useRef(useSharedValue(0));\n  var event = useEvent(function () {\n    var _f = function _f(event) {\n      offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n    _f._closure = {\n      offsetRef: {\n        current: offsetRef.current\n      }\n    };\n    _f.asString = \"function _f(event){const{offsetRef}=jsThis._closure;{offsetRef.current.value=event.contentOffset.x===0?event.contentOffset.y:event.contentOffset.x;}}\";\n    _f.__workletHash = 9478808601686;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.js (8:25)\";\n    return _f;\n  }(), scrollEventNames);\n  useEffect(function () {\n    var _event$current;\n    var viewTag = findNodeHandle(aref.current);\n    (_event$current = event.current) === null || _event$current === void 0 ? void 0 : _event$current.registerForEvents(viewTag);\n  }, [aref.current]);\n  return offsetRef.current;\n}","map":{"version":3,"names":["useEffect","useRef","findNodeHandle","useEvent","useSharedValue","scrollEventNames","useScrollViewOffset","aref","offsetRef","event","_f","current","value","contentOffset","x","y","_closure","asString","__workletHash","__location","_event$current","viewTag","registerForEvents"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.ts"],"sourcesContent":["import { RefObject, useEffect, useRef } from 'react';\n\nimport type Animated from 'react-native-reanimated';\nimport { ScrollEvent } from './useAnimatedScrollHandler';\nimport { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport { useEvent } from './utils';\nimport { useSharedValue } from './useSharedValue';\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\nexport function useScrollViewOffset(\n  aref: RefObject<Animated.ScrollView>\n): SharedValue<number> {\n  const offsetRef = useRef(useSharedValue(0));\n\n  const event = useEvent<ScrollEvent>((event: ScrollEvent) => {\n    'worklet';\n    offsetRef.current.value =\n      event.contentOffset.x === 0\n        ? event.contentOffset.y\n        : event.contentOffset.x;\n  }, scrollEventNames);\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(aref.current);\n    event.current?.registerForEvents(viewTag as number);\n  }, [aref.current]);\n\n  return offsetRef.current;\n}\n"],"mappings":"AAAA,SAAoBA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAA,OAAAC,cAAA;AAMpD,SAASC,QAAQ;AACjB,SAASC,cAAc;AAEvB,IAAMC,gBAAgB,GAAG,CACvB,UAAU,EACV,mBAAmB,EACnB,iBAAiB,EACjB,uBAAuB,EACvB,qBAAqB,CACtB;AAED,OAAO,SAASC,mBAAmBA,CACjCC,IAAoC,EACf;EACrB,IAAMC,SAAS,GAAGP,MAAM,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC;EAE3C,IAAMK,KAAK,GAAGN,QAAQ;IAAA,IAAAO,EAAA,YAAAA,GAAeD,KAAkB,EAAK;MAE1DD,SAAS,CAACG,OAAO,CAACC,KAAK,GACrBH,KAAK,CAACI,aAAa,CAACC,CAAC,KAAK,CAAC,GACvBL,KAAK,CAACI,aAAa,CAACE,CAAC,GACrBN,KAAK,CAACI,aAAa,CAACC,CAAC;IAC7B,CAAC;IAAAJ,EAAA,CAAAM,QAAA;MAAAR,SAAA;QAAAG,OAAA,EAtBHH,SAAS,CAAAG;MAAQ;IAAA;IAAAD,EAAA,CAAAO,QAAA;IAAAP,EAAA,CAAAQ,aAAA;IAAAR,EAAA,CAAAS,UAAA;IAAA,OAAAT,EAAA;EAAA,KAsBZL,gBAAgB,CAAC;EAEpBL,SAAS,CAAC,YAAM;IAAA,IAAAoB,cAAA;IACd,IAAMC,OAAO,GAAGnB,cAAc,CAACK,IAAI,CAACI,OAAO,CAAC;IAC5C,CAAAS,cAAA,GAAAX,KAAK,CAACE,OAAO,cAAAS,cAAA,uBAAbA,cAAA,CAAeE,iBAAiB,CAACD,OAAO,CAAW;EACrD,CAAC,EAAE,CAACd,IAAI,CAACI,OAAO,CAAC,CAAC;EAElB,OAAOH,SAAS,CAACG,OAAO;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}