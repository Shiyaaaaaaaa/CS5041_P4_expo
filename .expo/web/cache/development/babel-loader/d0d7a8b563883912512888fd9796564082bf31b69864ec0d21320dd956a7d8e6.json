{"ast":null,"code":"import NativeReanimatedModule from \"./NativeReanimated\";\nimport { makeShareableCloneOnUIRecursive, makeShareableCloneRecursive, registerShareableMapping } from \"./shareables\";\nimport { runOnUI } from \"./threads\";\nimport { valueSetter } from \"./valueSetter\";\nexport { stopMapper } from \"./mappers\";\nexport var makeUIMutable = function () {\n  var _f = function _f(initial, syncDataHolder) {\n    var listeners = new Map();\n    var value = initial;\n    var self = {\n      set value(newValue) {\n        valueSetter(self, newValue);\n      },\n      get value() {\n        return value;\n      },\n      set _value(newValue) {\n        value = newValue;\n        if (syncDataHolder) {\n          _updateDataSynchronously(syncDataHolder, makeShareableCloneOnUIRecursive(newValue));\n        }\n        listeners.forEach(function (listener) {\n          listener(newValue);\n        });\n      },\n      get _value() {\n        return value;\n      },\n      addListener: function addListener(id, listener) {\n        listeners.set(id, listener);\n      },\n      removeListener: function removeListener(id) {\n        listeners.delete(id);\n      },\n      _animation: null,\n      _isReanimatedSharedValue: true\n    };\n    return self;\n  };\n  _f._closure = {\n    valueSetter: valueSetter,\n    _updateDataSynchronously: _updateDataSynchronously,\n    makeShareableCloneOnUIRecursive: makeShareableCloneOnUIRecursive\n  };\n  _f.asString = \"function makeUIMutable(initial,syncDataHolder){const{valueSetter,_updateDataSynchronously,makeShareableCloneOnUIRecursive}=jsThis._closure;{const listeners=new Map();let value=initial;const self={set value(newValue){valueSetter(self,newValue);},get value(){return value;},set _value(newValue){value=newValue;if(syncDataHolder){_updateDataSynchronously(syncDataHolder,makeShareableCloneOnUIRecursive(newValue));}listeners.forEach(function(listener){listener(newValue);});},get _value(){return value;},addListener:function(id,listener){listeners.set(id,listener);},removeListener:function(id){listeners.delete(id);},_animation:null,_isReanimatedSharedValue:true};return self;}}\";\n  _f.__workletHash = 7954097032831;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js (6:7)\";\n  return _f;\n}();\nexport function makeMutable(initial) {\n  var oneWayReadsOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var value = initial;\n  var syncDataHolder;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(makeShareableCloneRecursive(value));\n    registerShareableMapping(syncDataHolder);\n  }\n  var handle = makeShareableCloneRecursive({\n    __init: function () {\n      var _f = function _f() {\n        return makeUIMutable(initial, syncDataHolder);\n      };\n      _f._closure = {\n        makeUIMutable: makeUIMutable,\n        initial: initial,\n        syncDataHolder: syncDataHolder\n      };\n      _f.asString = \"function _f(){const{makeUIMutable,initial,syncDataHolder}=jsThis._closure;{return makeUIMutable(initial,syncDataHolder);}}\";\n      _f.__workletHash = 7618671875995;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js (57:12)\";\n      return _f;\n    }()\n  });\n  var listeners = NativeReanimatedModule.native ? undefined : new Map();\n  var mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(function () {\n          var _f = function _f() {\n            mutable.value = newValue;\n          };\n          _f._closure = {\n            mutable: mutable,\n            newValue: newValue\n          };\n          _f.asString = \"function _f(){const{mutable,newValue}=jsThis._closure;{mutable.value=newValue;}}\";\n          _f.__workletHash = 2673348574152;\n          _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js (68:16)\";\n          return _f;\n        }())();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Setting `_value` directly is only possible on the UI runtime');\n      }\n      value = newValue;\n      listeners.forEach(function (listener) {\n        listener(newValue);\n      });\n    },\n    get _value() {\n      if (NativeReanimatedModule.native) {\n        throw new Error('Reading from `_value` directly is only possible on the UI runtime');\n      }\n      return value;\n    },\n    modify: function modify(modifier) {\n      runOnUI(function () {\n        var _f = function _f() {\n          mutable.value = modifier(mutable.value);\n        };\n        _f._closure = {\n          mutable: mutable,\n          modifier: modifier\n        };\n        _f.asString = \"function _f(){const{mutable,modifier}=jsThis._closure;{mutable.value=modifier(mutable.value);}}\";\n        _f.__workletHash = 3722799489610;\n        _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js (99:14)\";\n        return _f;\n      }())();\n    },\n    addListener: function addListener(id, listener) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners.set(id, listener);\n    },\n    removeListener: function removeListener(id) {\n      if (NativeReanimatedModule.native) {\n        throw new Error('removing listeners is only possible on the UI runtime');\n      }\n      listeners.delete(id);\n    },\n    _isReanimatedSharedValue: true\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\nexport function makeRemote() {\n  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var handle = makeShareableCloneRecursive({\n    __init: function () {\n      var _f = function _f() {\n        return initial;\n      };\n      _f._closure = {\n        initial: initial\n      };\n      _f.asString = \"function _f(){const{initial}=jsThis._closure;{return initial;}}\";\n      _f.__workletHash = 893303658646;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.js (125:12)\";\n      return _f;\n    }()\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}","map":{"version":3,"names":["NativeReanimatedModule","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","registerShareableMapping","runOnUI","valueSetter","stopMapper","makeUIMutable","_f","initial","syncDataHolder","listeners","Map","value","self","newValue","_value","_updateDataSynchronously","forEach","listener","addListener","id","set","removeListener","delete","_animation","_isReanimatedSharedValue","_closure","asString","__workletHash","__location","makeMutable","oneWayReadsOnly","arguments","length","undefined","native","makeSynchronizedDataHolder","handle","__init","mutable","getDataSynchronously","Error","modify","modifier","makeRemote"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/mutables.ts"],"sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport { SharedValue, ShareableSyncDataHolderRef } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from './shareables';\nimport { runOnUI } from './threads';\nimport { valueSetter } from './valueSetter';\nexport { stopMapper } from './mappers';\n\nexport function makeUIMutable<T>(\n  initial: T,\n  syncDataHolder?: ShareableSyncDataHolderRef<T>\n) {\n  'worklet';\n\n  const listeners = new Map();\n  let value = initial;\n\n  const self = {\n    set value(newValue) {\n      valueSetter(self, newValue);\n    },\n    get value() {\n      return value;\n    },\n    /**\n     * _value prop should only be accessed by the valueSetter implementation\n     * which may make the decision about updating the mutable value depending\n     * on the provided new value. All other places should only attempt to modify\n     * the mutable by assigning to value prop directly.\n     */\n    set _value(newValue: T) {\n      value = newValue;\n      if (syncDataHolder) {\n        _updateDataSynchronously(\n          syncDataHolder,\n          makeShareableCloneOnUIRecursive(newValue)\n        );\n      }\n      listeners.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      return value;\n    },\n    addListener: (id: number, listener: (newValue: T) => void) => {\n      listeners.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      listeners.delete(id);\n    },\n    _animation: null,\n    _isReanimatedSharedValue: true,\n  };\n  return self;\n}\n\nexport function makeMutable<T>(\n  initial: T,\n  oneWayReadsOnly = false\n): SharedValue<T> {\n  let value: T = initial;\n  let syncDataHolder: ShareableSyncDataHolderRef<T> | undefined;\n  if (!oneWayReadsOnly && NativeReanimatedModule.native) {\n    // updates are always synchronous when running on web or in Jest environment\n    syncDataHolder = NativeReanimatedModule.makeSynchronizedDataHolder(\n      makeShareableCloneRecursive(value)\n    );\n    registerShareableMapping(syncDataHolder);\n  }\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return makeUIMutable(initial, syncDataHolder);\n    },\n  });\n  // listeners can only work on JS thread on Web and jest environments\n  const listeners = NativeReanimatedModule.native ? undefined : new Map();\n  const mutable = {\n    set value(newValue) {\n      if (NativeReanimatedModule.native) {\n        runOnUI(() => {\n          'worklet';\n          mutable.value = newValue;\n        })();\n      } else {\n        valueSetter(mutable, newValue);\n      }\n    },\n    get value() {\n      if (syncDataHolder) {\n        return NativeReanimatedModule.getDataSynchronously(syncDataHolder);\n      }\n      return value;\n    },\n    set _value(newValue: T) {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Setting `_value` directly is only possible on the UI runtime'\n        );\n      }\n      value = newValue;\n      listeners!.forEach((listener) => {\n        listener(newValue);\n      });\n    },\n    get _value(): T {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'Reading from `_value` directly is only possible on the UI runtime'\n        );\n      }\n      return value;\n    },\n    modify: (modifier: (value: T) => T) => {\n      runOnUI(() => {\n        'worklet';\n        mutable.value = modifier(mutable.value);\n      })();\n    },\n    addListener: (id: number, listener: (value: T) => void) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error('adding listeners is only possible on the UI runtime');\n      }\n      listeners!.set(id, listener);\n    },\n    removeListener: (id: number) => {\n      if (NativeReanimatedModule.native) {\n        throw new Error(\n          'removing listeners is only possible on the UI runtime'\n        );\n      }\n      listeners!.delete(id);\n    },\n    _isReanimatedSharedValue: true,\n  };\n  registerShareableMapping(mutable, handle);\n  return mutable;\n}\n\nexport function makeRemote<T extends object>(initial: T = {} as T): T {\n  const handle = makeShareableCloneRecursive({\n    __init: () => {\n      'worklet';\n      return initial;\n    },\n  });\n  registerShareableMapping(initial, handle);\n  return initial;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}