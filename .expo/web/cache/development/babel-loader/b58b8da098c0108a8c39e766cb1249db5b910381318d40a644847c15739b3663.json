{"ast":null,"code":"export var Bezier = function () {\n  var _f = function _f(mX1, mY1, mX2, mY2) {\n    var NEWTON_ITERATIONS = 4;\n    var NEWTON_MIN_SLOPE = 0.001;\n    var SUBDIVISION_PRECISION = 0.0000001;\n    var SUBDIVISION_MAX_ITERATIONS = 10;\n    var kSplineTableSize = 11;\n    var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    var A = function () {\n      var _f = function _f(aA1, aA2) {\n        return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n      };\n      _f._closure = {};\n      _f.asString = \"function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}\";\n      _f.__workletHash = 7696928702327;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (18:2)\";\n      return _f;\n    }();\n    var B = function () {\n      var _f = function _f(aA1, aA2) {\n        return 3.0 * aA2 - 6.0 * aA1;\n      };\n      _f._closure = {};\n      _f.asString = \"function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}\";\n      _f.__workletHash = 3169786778773;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (23:2)\";\n      return _f;\n    }();\n    var C = function () {\n      var _f = function _f(aA1) {\n        return 3.0 * aA1;\n      };\n      _f._closure = {};\n      _f.asString = \"function C(aA1){return 3.0*aA1;}\";\n      _f.__workletHash = 6399610653367;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (28:2)\";\n      return _f;\n    }();\n    var calcBezier = function () {\n      var _f = function _f(aT, aA1, aA2) {\n        return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n      };\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.asString = \"function calcBezier(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}}\";\n      _f.__workletHash = 3153137150968;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (35:2)\";\n      return _f;\n    }();\n    var getSlope = function () {\n      var _f = function _f(aT, aA1, aA2) {\n        return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n      };\n      _f._closure = {\n        A: A,\n        B: B,\n        C: C\n      };\n      _f.asString = \"function getSlope(aT,aA1,aA2){const{A,B,C}=jsThis._closure;{return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}}\";\n      _f.__workletHash = 17050227570308;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (42:2)\";\n      return _f;\n    }();\n    var binarySubdivide = function () {\n      var _f = function _f(aX, aA, aB, mX1, mX2) {\n        var currentX;\n        var currentT;\n        var i = 0;\n        do {\n          currentT = aA + (aB - aA) / 2.0;\n          currentX = calcBezier(currentT, mX1, mX2) - aX;\n          if (currentX > 0.0) {\n            aB = currentT;\n          } else {\n            aA = currentT;\n          }\n        } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n      };\n      _f._closure = {\n        SUBDIVISION_PRECISION: SUBDIVISION_PRECISION,\n        SUBDIVISION_MAX_ITERATIONS: SUBDIVISION_MAX_ITERATIONS,\n        calcBezier: calcBezier\n      };\n      _f.asString = \"function binarySubdivide(aX,aA,aB,mX1,mX2){const{SUBDIVISION_PRECISION,SUBDIVISION_MAX_ITERATIONS,calcBezier}=jsThis._closure;{let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}}\";\n      _f.__workletHash = 7302972877011;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (47:2)\";\n      return _f;\n    }();\n    var newtonRaphsonIterate = function () {\n      var _f = function _f(aX, aGuessT, mX1, mX2) {\n        for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n          var currentSlope = getSlope(aGuessT, mX1, mX2);\n          if (currentSlope === 0.0) {\n            return aGuessT;\n          }\n          var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n          aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n      };\n      _f._closure = {\n        NEWTON_ITERATIONS: NEWTON_ITERATIONS,\n        getSlope: getSlope,\n        calcBezier: calcBezier\n      };\n      _f.asString = \"function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){const{NEWTON_ITERATIONS,getSlope,calcBezier}=jsThis._closure;{for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}}\";\n      _f.__workletHash = 10378506933532;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (64:2)\";\n      return _f;\n    }();\n    var LinearEasing = function () {\n      var _f = function _f(x) {\n        return x;\n      };\n      _f._closure = {};\n      _f.asString = \"function LinearEasing(x){return x;}\";\n      _f.__workletHash = 3962143445177;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (77:2)\";\n      return _f;\n    }();\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n    if (mX1 === mY1 && mX2 === mY2) {\n      return LinearEasing;\n    }\n    var sampleValues = new Array(kSplineTableSize);\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    var getTForX = function () {\n      var _f = function _f(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n          intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        var guessForT = intervalStart + dist * kSampleStepSize;\n        var initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n          return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        } else if (initialSlope === 0.0) {\n          return guessForT;\n        } else {\n          return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n      };\n      _f._closure = {\n        kSplineTableSize: kSplineTableSize,\n        sampleValues: sampleValues,\n        kSampleStepSize: kSampleStepSize,\n        getSlope: getSlope,\n        mX1: mX1,\n        mX2: mX2,\n        NEWTON_MIN_SLOPE: NEWTON_MIN_SLOPE,\n        newtonRaphsonIterate: newtonRaphsonIterate,\n        binarySubdivide: binarySubdivide\n      };\n      _f.asString = \"function getTForX(aX){const{kSplineTableSize,sampleValues,kSampleStepSize,getSlope,mX1,mX2,NEWTON_MIN_SLOPE,newtonRaphsonIterate,binarySubdivide}=jsThis._closure;{let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}}\";\n      _f.__workletHash = 3164695138880;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (101:2)\";\n      return _f;\n    }();\n    return function () {\n      var _f = function _f(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n          return x;\n        }\n        if (x === 0) {\n          return 0;\n        }\n        if (x === 1) {\n          return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n      };\n      _f._closure = {\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        calcBezier: calcBezier,\n        getTForX: getTForX\n      };\n      _f.asString = \"function BezierEasing(x){const{mX1,mY1,mX2,mY2,calcBezier,getTForX}=jsThis._closure;{if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);}}\";\n      _f.__workletHash = 8676971518933;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (124:9)\";\n      return _f;\n    }();\n  };\n  _f._closure = {};\n  _f.asString = \"function Bezier(mX1,mY1,mX2,mY2){const NEWTON_ITERATIONS=4;const NEWTON_MIN_SLOPE=0.001;const SUBDIVISION_PRECISION=0.0000001;const SUBDIVISION_MAX_ITERATIONS=10;const kSplineTableSize=11;const kSampleStepSize=1.0/(kSplineTableSize-1.0);function A(aA1,aA2){'worklet';return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){'worklet';return 3.0*aA2-6.0*aA1;}function C(aA1){'worklet';return 3.0*aA1;}function calcBezier(aT,aA1,aA2){'worklet';return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){'worklet';return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,aA,aB,mX1,mX2){'worklet';let currentX;let currentT;let i=0;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,aGuessT,mX1,mX2){'worklet';for(let i=0;i<NEWTON_ITERATIONS;++i){const currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}const currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}function LinearEasing(x){'worklet';return x;}if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}if(mX1===mY1&&mX2===mY2){return LinearEasing;}const sampleValues=new Array(kSplineTableSize);for(let i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}function getTForX(aX){'worklet';let intervalStart=0.0;let currentSample=1;const lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;const dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);const guessForT=intervalStart+dist*kSampleStepSize;const initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){'worklet';if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};}\";\n  _f.__workletHash = 7389715548968;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.js (9:7)\";\n  return _f;\n}();","map":{"version":3,"names":["Bezier","_f","mX1","mY1","mX2","mY2","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","A","aA1","aA2","_closure","asString","__workletHash","__location","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/Bezier.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nexport function Bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number\n): (x: number) => number {\n  'worklet';\n\n  const NEWTON_ITERATIONS = 4;\n  const NEWTON_MIN_SLOPE = 0.001;\n  const SUBDIVISION_PRECISION = 0.0000001;\n  const SUBDIVISION_MAX_ITERATIONS = 10;\n\n  const kSplineTableSize = 11;\n  const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\n  function A(aA1: number, aA2: number): number {\n    'worklet';\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1: number) {\n    'worklet';\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT: number, aA1: number, aA2: number): number {\n    'worklet';\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n\n  function binarySubdivide(\n    aX: number,\n    aA: number,\n    aB: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (\n      Math.abs(currentX) > SUBDIVISION_PRECISION &&\n      ++i < SUBDIVISION_MAX_ITERATIONS\n    );\n    return currentT;\n  }\n\n  function newtonRaphsonIterate(\n    aX: number,\n    aGuessT: number,\n    mX1: number,\n    mX2: number\n  ): number {\n    'worklet';\n    for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n      const currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n\n  function LinearEasing(x: number): number {\n    'worklet';\n    return x;\n  }\n\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // FIXME: Float32Array is not available in Hermes right now\n  //\n  // var float32ArraySupported = typeof Float32Array === 'function';\n  // const sampleValues = float32ArraySupported\n  // ? new Float32Array(kSplineTableSize)\n  // : new Array(kSplineTableSize);\n\n  // Precompute samples table\n  const sampleValues = new Array(kSplineTableSize);\n\n  for (let i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX(aX: number): number {\n    'worklet';\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    'worklet';\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n"],"mappings":"AAQA,WAAgBA,MAAM;EAAA,IAAAC,EAAA,YAAAA,GACpBC,GAAW,EACXC,GAAW,EACXC,GAAW,EACXC,GAAW,EACY;IAGvB,IAAMC,iBAAiB,GAAG,CAAC;IAC3B,IAAMC,gBAAgB,GAAG,KAAK;IAC9B,IAAMC,qBAAqB,GAAG,SAAS;IACvC,IAAMC,0BAA0B,GAAG,EAAE;IAErC,IAAMC,gBAAgB,GAAG,EAAE;IAC3B,IAAMC,eAAe,GAAG,GAAG,IAAID,gBAAgB,GAAG,GAAG,CAAC;IAAA,IAE7CE,CAAC;MAAA,IAAAX,EAAA,YAAAA,GAACY,GAAW,EAAEC,GAAW,EAAU;QAE3C,OAAO,GAAG,GAAG,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;MACpC;MAAAZ,EAAA,CAAAc,QAAA;MAAAd,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAAA,IACSkB,CAAC;MAAA,IAAAlB,EAAA,YAAAA,GAACY,GAAW,EAAEC,GAAW,EAAU;QAE3C,OAAO,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGD,GAAG;MAC9B;MAAAZ,EAAA,CAAAc,QAAA;MAAAd,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAAA,IACSmB,CAAC;MAAA,IAAAnB,EAAA,YAAAA,GAACY,GAAW,EAAE;QAEtB,OAAO,GAAG,GAAGA,GAAG;MAClB;MAAAZ,EAAA,CAAAc,QAAA;MAAAd,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAAA,IAGSoB,UAAU;MAAA,IAAApB,EAAA,YAAAA,GAACqB,EAAU,EAAET,GAAW,EAAEC,GAAW,EAAU;QAEhE,OAAO,CAAC,CAACF,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGQ,EAAE,GAAGH,CAAC,CAACN,GAAG,EAAEC,GAAG,CAAC,IAAIQ,EAAE,GAAGF,CAAC,CAACP,GAAG,CAAC,IAAIS,EAAE;MAC9D;MAAArB,EAAA,CAAAc,QAAA;QAAAH,CAAA,EAtCFA,CAAA;QAAAO,CAAA,EAAAA,CAAA;QAAAC,CAAA,EAAAA;MAAA;MAAAnB,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAAA,IAyCWsB,QAAQ;MAAA,IAAAtB,EAAA,YAAAA,GAACqB,EAAU,EAAET,GAAW,EAAEC,GAAW,EAAU;QAE9D,OAAO,GAAG,GAAGF,CAAC,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGQ,EAAE,GAAGA,EAAE,GAAG,GAAG,GAAGH,CAAC,CAACN,GAAG,EAAEC,GAAG,CAAC,GAAGQ,EAAE,GAAGF,CAAC,CAACP,GAAG,CAAC;MACtE;MAAAZ,EAAA,CAAAc,QAAA;QAAAH,CAAA,EA5CFA,CAAA;QAAAO,CAAA,EAAAA,CAAA;QAAAC,CAAA,EAAAA;MAAA;MAAAnB,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAAA,IA8CWuB,eAAe;MAAA,IAAAvB,EAAA,YAAAA,GACtBwB,EAAU,EACVC,EAAU,EACVC,EAAU,EACVzB,GAAW,EACXE,GAAW,EACH;QAER,IAAIwB,QAAQ;QACZ,IAAIC,QAAQ;QACZ,IAAIC,CAAC,GAAG,CAAC;QACT,GAAG;UACDD,QAAQ,GAAGH,EAAE,GAAG,CAACC,EAAE,GAAGD,EAAE,IAAI,GAAG;UAC/BE,QAAQ,GAAGP,UAAU,CAACQ,QAAQ,EAAE3B,GAAG,EAAEE,GAAG,CAAC,GAAGqB,EAAE;UAC9C,IAAIG,QAAQ,GAAG,GAAG,EAAE;YAClBD,EAAE,GAAGE,QAAQ;UACf,CAAC,MAAM;YACLH,EAAE,GAAGG,QAAQ;UACf;QACF,CAAC,QACCE,IAAI,CAACC,GAAG,CAACJ,QAAQ,CAAC,GAAGpB,qBAAqB,IAC1C,EAAEsB,CAAC,GAAGrB,0BAA0B;QAElC,OAAOoB,QAAQ;MACjB;MAAA5B,EAAA,CAAAc,QAAA;QAAAP,qBAAA,EAvD8BA,qBAAS;QAAAC,0BAAA,EAAAA,0BAAA;QAAAY,UAAA,E;;;;;;;QAyD9BY,oBAAoB;MAAA,IAAAhC,EAAA,YAAAA,GAC3BwB,EAAU,EACVS,OAAe,EACfhC,GAAW,EACXE,GAAW,EACH;QAER,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,iBAAiB,EAAE,EAAEwB,CAAC,EAAE;UAC1C,IAAMK,YAAY,GAAGZ,QAAQ,CAACW,OAAO,EAAEhC,GAAG,EAAEE,GAAG,CAAC;UAChD,IAAI+B,YAAY,KAAK,GAAG,EAAE;YACxB,OAAOD,OAAO;UAChB;UACA,IAAMN,QAAQ,GAAGP,UAAU,CAACa,OAAO,EAAEhC,GAAG,EAAEE,GAAG,CAAC,GAAGqB,EAAE;UACnDS,OAAO,IAAIN,QAAQ,GAAGO,YAAY;QACpC;QACA,OAAOD,OAAO;MAChB;MAAAjC,EAAA,CAAAc,QAAA;QAAAT,iBAAA,EAzFFA,iBAAA;QAAAiB,QAAA,EACAA,QAAA;QAAAF,UAAA,E;;;;;;;QA0FWe,YAAY;MAAA,IAAAnC,EAAA,YAAAA,GAACoC,CAAS,EAAU;QAEvC,OAAOA,CAAC;MACV;MAAApC,EAAA,CAAAc,QAAA;MAAAd,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;IAEA,IAAI,EAAEC,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,CAAC,IAAIE,GAAG,IAAI,CAAC,IAAIA,GAAG,IAAI,CAAC,CAAC,EAAE;MACnD,MAAM,IAAIkC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,IAAIpC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;MAC9B,OAAO+B,YAAY;IACrB;IAUA,IAAMG,YAAY,GAAG,IAAIC,KAAK,CAAC9B,gBAAgB,CAAC;IAEhD,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,gBAAgB,EAAE,EAAEoB,CAAC,EAAE;MACzCS,YAAY,CAACT,CAAC,CAAC,GAAGT,UAAU,CAACS,CAAC,GAAGnB,eAAe,EAAET,GAAG,EAAEE,GAAG,CAAC;IAC7D;IAAA,IAESqC,QAAQ;MAAA,IAAAxC,EAAA,YAAAA,GAACwB,EAAU,EAAU;QAEpC,IAAIiB,aAAa,GAAG,GAAG;QACvB,IAAIC,aAAa,GAAG,CAAC;QACrB,IAAMC,UAAU,GAAGlC,gBAAgB,GAAG,CAAC;QAEvC,OAEEiC,aAAa,KAAKC,UAAU,IAAIL,YAAY,CAACI,aAAa,CAAC,IAAIlB,EAAE,EACjE,EAAEkB,aAAa,EACf;UACAD,aAAa,IAAI/B,eAAe;QAClC;QACA,EAAEgC,aAAa;QAGf,IAAME,IAAI,GACR,CAACpB,EAAE,GAAGc,YAAY,CAACI,aAAa,CAAC,KAChCJ,YAAY,CAACI,aAAa,GAAG,CAAC,CAAC,GAAGJ,YAAY,CAACI,aAAa,CAAC,CAAC;QACjE,IAAMG,SAAS,GAAGJ,aAAa,GAAGG,IAAI,GAAGlC,eAAe;QAExD,IAAMoC,YAAY,GAAGxB,QAAQ,CAACuB,SAAS,EAAE5C,GAAG,EAAEE,GAAG,CAAC;QAClD,IAAI2C,YAAY,IAAIxC,gBAAgB,EAAE;UACpC,OAAO0B,oBAAoB,CAACR,EAAE,EAAEqB,SAAS,EAAE5C,GAAG,EAAEE,GAAG,CAAC;QACtD,CAAC,MAAM,IAAI2C,YAAY,KAAK,GAAG,EAAE;UAC/B,OAAOD,SAAS;QAClB,CAAC,MAAM;UACL,OAAOtB,eAAe,CACpBC,EAAE,EACFiB,aAAa,EACbA,aAAa,GAAG/B,eAAe,EAC/BT,GAAG,EACHE,GAAG,CACJ;QACH;MACF;MAAAH,EAAA,CAAAc,QAAA;QAAAL,gBAAA,EAvJFA,gBAAA;QAAA6B,YAAA,EAY6BA,YAAA;QAAA5B,eAAA,E;kBAErBY,QAAqB;QAAArB,GAAA,E;;0BACrBK,gBAA6B;QAAA0B,oBAAA,EAE7BA,oBAAqB;QAAAT,eAAA,E;;;;;;;IAwI3B;MAAA,IAAAvB,EAAA,YAAAA,GAA6BoC,CAAC,EAAE;QAE9B,IAAInC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,EAAE;UAC9B,OAAOgC,CAAC;QACV;QAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,CAAC;QACV;QACA,IAAIA,CAAC,KAAK,CAAC,EAAE;UACX,OAAO,CAAC;QACV;QACA,OAAOhB,UAAU,CAACoB,QAAQ,CAACJ,CAAC,CAAC,EAAElC,GAAG,EAAEE,GAAG,CAAC;MAC1C,CAAC;MAAAJ,EAAA,CAAAc,QAAA;QAAAb,GAAA,EAxKHA,GAAA;QAAAC,GAAA,EAegCA,GAAA;QAAAC,GAAA,EAfhCA,GAAA;QAAAC,GAAA,EAegCA,GAAA;QAAAgB,UAAA,EAAxBA,UAAA;QAAAoB,QAAA,EAAAA;MAAmB;MAAAxC,EAAA,CAAAe,QAAA;MAAAf,EAAA,CAAAgB,aAAA;MAAAhB,EAAA,CAAAiB,UAAA;MAAA,OAAAjB,EAAA;IAAA;EA0J3B;EAAAA,EAAA,CAAAc,QAAA;EAAAd,EAAA,CAAAe,QAAA;EAAAf,EAAA,CAAAgB,aAAA;EAAAhB,EAAA,CAAAiB,UAAA;EAAA,OAAAjB,EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}