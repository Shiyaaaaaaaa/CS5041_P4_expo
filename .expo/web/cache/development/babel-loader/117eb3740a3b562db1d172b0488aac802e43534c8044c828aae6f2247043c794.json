{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\nexport var Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity'\n};\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var h = 0;\n    var _options$useCorrected = options.useCorrectedHSVInterpolation,\n      useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n    if (useCorrectedHSVInterpolation) {\n      var correctedInputRange = [inputRange[0]];\n      var originalH = colors.h;\n      var correctedH = [originalH[0]];\n      for (var i = 1; i < originalH.length; ++i) {\n        var d = originalH[i] - originalH[i - 1];\n        if (originalH[i] > originalH[i - 1] && d > 0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] - 1);\n          correctedH.push(originalH[i]);\n        } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] + 1);\n          correctedH.push(originalH[i]);\n        } else {\n          correctedInputRange.push(inputRange[i]);\n          correctedH.push(originalH[i]);\n        }\n      }\n      h = (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n    } else {\n      h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    }\n    var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v, a);\n  };\n  _f._closure = {\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    hsvToColor: hsvToColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{interpolate,Extrapolate,hsvToColor}=jsThis._closure;{let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolate.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return hsvToColor(h,s,v,a);}}\";\n  _f.__workletHash = 8882134826991;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (10:29)\";\n  return _f;\n}();\nvar toLinearSpace = function () {\n  var _f = function _f(x, gamma) {\n    return x.map(function (v) {\n      return Math.pow(v / 255, gamma);\n    });\n  };\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\";\n  _f.__workletHash = 1559524611463;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (51:22)\";\n  return _f;\n}();\nvar toGammaSpace = function () {\n  var _f = function _f(x, gamma) {\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n  };\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\";\n  _f.__workletHash = 2913845988966;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (56:21)\";\n  return _f;\n}();\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var _options$gamma = options.gamma,\n      gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n    var outputR = colors.r,\n      outputG = colors.g,\n      outputB = colors.b;\n    if (gamma !== 1) {\n      outputR = toLinearSpace(outputR, gamma);\n      outputG = toLinearSpace(outputG, gamma);\n      outputB = toLinearSpace(outputB, gamma);\n    }\n    var r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n    var g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n    var b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    if (gamma === 1) {\n      return rgbaColor(r, g, b, a);\n    }\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n  };\n  _f._closure = {\n    toLinearSpace: toLinearSpace,\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    rgbaColor: rgbaColor,\n    toGammaSpace: toGammaSpace\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolate,rgbaColor,toGammaSpace}=jsThis._closure;{const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolate.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolate.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}}\";\n  _f.__workletHash = 2815254997232;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (61:29)\";\n  return _f;\n}();\nvar getInterpolateRGB = function () {\n  var _f = function _f(colors) {\n    var r = [];\n    var g = [];\n    var b = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (processedColor !== null && processedColor !== undefined) {\n        r.push(red(processedColor));\n        g.push(green(processedColor));\n        b.push(blue(processedColor));\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,red,green,blue,opacity}=jsThis._closure;{const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}}\";\n  _f.__workletHash = 3521870636649;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (86:26)\";\n  return _f;\n}();\nvar getInterpolateHSV = function () {\n  var _f = function _f(colors) {\n    var h = [];\n    var s = [];\n    var v = [];\n    var a = [];\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n      if (typeof processedColor === 'number') {\n        var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n        h.push(processedHSVColor.h);\n        s.push(processedHSVColor.s);\n        v.push(processedHSVColor.v);\n        a.push(opacity(processedColor));\n      }\n    }\n    return {\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    };\n  };\n  _f._closure = {\n    processColor: processColor,\n    RGBtoHSV: RGBtoHSV,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,RGBtoHSV,red,green,blue,opacity}=jsThis._closure;{const h=[];const s=[];const v=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};}}\";\n  _f.__workletHash = 686412396573;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (111:26)\";\n  return _f;\n}();\nexport var interpolateColor = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    } else if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n    throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n  _f._closure = {\n    interpolateColorsHSV: interpolateColorsHSV,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateRGB: getInterpolateRGB\n  };\n  _f.asString = \"function _f(value,inputRange,outputRange){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=jsThis._closure;{let colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'RGB';let options=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 717103390851;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (136:32)\";\n  return _f;\n}();\nexport var ColorSpace = function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n  return ColorSpace;\n}({});\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}\nexport var interpolateSharableColor = function () {\n  var _f = function _f(value, interpolateConfig) {\n    var colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n      if (!colors) {\n        colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n      return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n      if (!colors) {\n        colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n      return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB,\n      HSV: ColorSpace.HSV\n    },\n    getInterpolateRGB: getInterpolateRGB,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsHSV: interpolateColorsHSV\n  };\n  _f.asString = \"function _f(value,interpolateConfig){const{ColorSpace,getInterpolateRGB,interpolateColorsRGB,getInterpolateHSV,interpolateColorsHSV}=jsThis._closure;{let colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}throw new Error(\\\"Invalid color space provided: \\\"+interpolateConfig.value.colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 17520997050941;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.js (164:40)\";\n  return _f;\n}();","map":{"version":3,"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","interpolateColorsHSV","_f","value","inputRange","colors","options","h","_options$useCorrected","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","s","v","a","_closure","asString","__workletHash","__location","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","_options$gamma","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","arguments","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}