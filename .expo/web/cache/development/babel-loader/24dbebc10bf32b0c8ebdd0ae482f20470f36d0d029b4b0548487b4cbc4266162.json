{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure;\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = function () {\n    var _f = function _f(animatedRef) {\n      if (!_WORKLET) {\n        console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n        return null;\n      }\n      var viewTag = animatedRef();\n      if (viewTag === -1) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      }\n      var measured = _measure(viewTag);\n      if (measured === null) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      } else if (measured.x === -1234567) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n        return null;\n      } else if (isNaN(measured.x)) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n        return null;\n      } else {\n        return measured;\n      }\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef){if(!_WORKLET){console.warn('[Reanimated] measure() was called from the main JS context. Measure is '+'only available in the UI runtime. This may also happen if measure() '+'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle '+'calls the given worklet on the JS runtime during render. If you want to '+'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will '+'only be called on the UI runtime after the render has been completed.');return null;}const viewTag=animatedRef();if(viewTag===-1){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}const measured=_measure(viewTag);if(measured===null){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}else if(measured.x===-1234567){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" returned an invalid measurement response.\\\");return null;}else if(isNaN(measured.x)){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\\\");return null;}else{return measured;}}\";\n    _f.__workletHash = 4824065265814;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (29:12)\";\n    return _f;\n  }();\n}\nexport var dispatchCommand = function () {\n  var _f = function _f(animatedRef, commandName, args) {\n    if (!_WORKLET || !isNative) {\n      return;\n    }\n    var shadowNodeWrapper = animatedRef();\n    _dispatchCommand(shadowNodeWrapper, commandName, args);\n  };\n  _f._closure = {\n    isNative: isNative,\n    _dispatchCommand: _dispatchCommand\n  };\n  _f.asString = \"function dispatchCommand(animatedRef,commandName,args){const{isNative,_dispatchCommand}=jsThis._closure;{if(!_WORKLET||!isNative){return;}const shadowNodeWrapper=animatedRef();_dispatchCommand(shadowNodeWrapper,commandName,args);}}\";\n  _f.__workletHash = 841492447143;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (56:7)\";\n  return _f;\n}();\nexport var scrollTo;\nif (isWeb()) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      var element = animatedRef();\n      element.scrollTo({\n        x: x,\n        y: y,\n        animated: animated\n      });\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){const element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});}\";\n    _f.__workletHash = 1539328189141;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (70:13)\";\n    return _f;\n  }();\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n    };\n    _f._closure = {\n      dispatchCommand: dispatchCommand\n    };\n    _f.asString = \"function _f(animatedRef,x,y,animated){const{dispatchCommand}=jsThis._closure;{dispatchCommand(animatedRef,'scrollTo',[x,y,animated]);}}\";\n    _f.__workletHash = 11994069508833;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (82:13)\";\n    return _f;\n  }();\n} else if (isNative) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      if (!_WORKLET) {\n        return;\n      }\n      var viewTag = animatedRef();\n      _scrollTo(viewTag, x, y, animated);\n    };\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){if(!_WORKLET){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}\";\n    _f.__workletHash = 11267178326065;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (88:13)\";\n    return _f;\n  }();\n} else {\n  scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\nexport var setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET || !isNative) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n    _setGestureState(handlerTag, newState);\n  };\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isNative}=jsThis._closure;{if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 11162109634360;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.js (104:7)\";\n  return _f;\n}();","map":{"version":3,"names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_f","_WORKLET","viewTag","measured","_measure","isNaN","_closure","asString","__workletHash","__location","dispatchCommand","commandName","args","shadowNodeWrapper","_dispatchCommand","scrollTo","animated","global","_IS_FABRIC","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/NativeMethods.ts"],"sourcesContent":["/* global _WORKLET _measure _scrollTo _dispatchCommand _setGestureState */\nimport { Component } from 'react';\nimport { findNodeHandle } from 'react-native';\nimport { MeasuredDimensions, ShadowNodeWrapper } from './commonTypes';\nimport { RefObjectFunction } from './hook/commonTypes';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\n\nexport function getTag(\n  view: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number {\n  return findNodeHandle(view);\n}\n\nconst isNative = !shouldBeUseWeb();\n\nexport let measure: (\n  animatedRef: RefObjectFunction<Component>\n) => MeasuredDimensions | null;\n\nif (isWeb()) {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    const element = animatedRef() as unknown as HTMLElement; // TODO: fix typing of animated refs on web\n    const viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top,\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = (_animatedRef: RefObjectFunction<Component>) => {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = (animatedRef: RefObjectFunction<Component>) => {\n    'worklet';\n    if (!_WORKLET) {\n      console.warn(\n        '[Reanimated] measure() was called from the main JS context. Measure is ' +\n          'only available in the UI runtime. This may also happen if measure() ' +\n          'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n          'calls the given worklet on the JS runtime during render. If you want to ' +\n          'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n          'only be called on the UI runtime after the render has been completed.'\n      );\n      return null;\n    }\n\n    const viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    }\n\n    const measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`\n      );\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`\n      );\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\n        `[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`\n      );\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\n\nexport function dispatchCommand(\n  animatedRef: RefObjectFunction<Component>,\n  commandName: string,\n  args: Array<unknown>\n): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    return;\n  }\n\n  // dispatchCommand works only on Fabric where animatedRef returns\n  // an object (ShadowNodeWrapper) and not a number\n  const shadowNodeWrapper = animatedRef() as ShadowNodeWrapper;\n  _dispatchCommand!(shadowNodeWrapper, commandName, args);\n}\n\nexport let scrollTo: (\n  animatedRef: RefObjectFunction<Component>,\n  x: number,\n  y: number,\n  animated: boolean\n) => void;\n\nif (isWeb()) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    const element = animatedRef() as unknown as HTMLElement;\n    // @ts-ignore same call as in react-native-web\n    element.scrollTo({ x, y, animated });\n  };\n} else if (isNative && global._IS_FABRIC) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);\n  };\n} else if (isNative) {\n  scrollTo = (\n    animatedRef: RefObjectFunction<Component>,\n    x: number,\n    y: number,\n    animated: boolean\n  ) => {\n    'worklet';\n    if (!_WORKLET) {\n      return;\n    }\n\n    // Calling animatedRef on Paper returns a number (nativeTag)\n    const viewTag = animatedRef() as number;\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = (\n    _animatedRef: RefObjectFunction<Component>,\n    _x: number,\n    _y: number\n  ) => {\n    // no-op\n  };\n}\n\nexport function setGestureState(handlerTag: number, newState: number): void {\n  'worklet';\n  if (!_WORKLET || !isNative) {\n    console.warn(\n      '[Reanimated] You can not use setGestureState in non-worklet function.'\n    );\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}