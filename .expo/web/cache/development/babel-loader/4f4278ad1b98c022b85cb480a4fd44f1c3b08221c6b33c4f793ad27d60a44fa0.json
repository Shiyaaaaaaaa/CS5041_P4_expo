{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { reportFatalErrorOnJS } from \"./errors\";\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { isJest } from \"./PlatformChecker\";\nimport { runOnJS, setupMicrotasks, callMicrotasks, runOnUIImmediately } from \"./threads\";\nvar callGuardDEV = function () {\n  var _f = function _f(fn) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    try {\n      fn.apply(void 0, args);\n    } catch (e) {\n      if (global.__ErrorUtils) {\n        global.__ErrorUtils.reportFatalError(e);\n      } else {\n        throw e;\n      }\n    }\n  };\n  _f._closure = {};\n  _f.asString = \"function callGuardDEV(fn){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}try{fn(...args);}catch(e){if(global.__ErrorUtils){global.__ErrorUtils.reportFatalError(e);}else{throw e;}}}\";\n  _f.__workletHash = 14810700639596;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js (7:0)\";\n  return _f;\n}();\nvar valueUnpacker = function () {\n  var _f = function _f(objectToUnpack, category) {\n    var workletsCache = global.__workletsCache;\n    var handleCache = global.__handleCache;\n    if (workletsCache === undefined) {\n      workletsCache = global.__workletsCache = new Map();\n      handleCache = global.__handleCache = new WeakMap();\n    }\n    var workletHash = objectToUnpack.__workletHash;\n    if (workletHash !== undefined) {\n      var workletFun = workletsCache.get(workletHash);\n      if (workletFun === undefined) {\n        var initData = objectToUnpack.__initData;\n        if (global.evalWithSourceMap) {\n          workletFun = global.evalWithSourceMap('(' + initData.code + '\\n)', initData.location, initData.sourceMap);\n        } else if (global.evalWithSourceUrl) {\n          workletFun = global.evalWithSourceUrl('(' + initData.code + '\\n)', \"worklet_\" + workletHash);\n        } else {\n          workletFun = eval('(' + initData.code + '\\n)');\n        }\n        workletsCache.set(workletHash, workletFun);\n      }\n      var functionInstance = workletFun.bind(objectToUnpack);\n      objectToUnpack._recur = functionInstance;\n      return functionInstance;\n    } else if (objectToUnpack.__init) {\n      var value = handleCache.get(objectToUnpack);\n      if (value === undefined) {\n        value = objectToUnpack.__init();\n        handleCache.set(objectToUnpack, value);\n      }\n      return value;\n    } else if (category === 'RemoteFunction') {\n      var fun = function fun() {\n        throw new Error(\"Tried to synchronously call a non-worklet function on the UI thread.\\n\\nPossible solutions are:\\n  a) If you want to synchronously execute this method, mark it as a worklet\\n  b) If you want to execute this function on the JS thread, wrap it using `runOnJS`\");\n      };\n      fun.__remoteFunction = objectToUnpack;\n      return fun;\n    } else {\n      throw new Error('data type not recognized by unpack method');\n    }\n  };\n  _f._closure = {\n    WeakMap: WeakMap,\n    eval: eval\n  };\n  _f.asString = \"function valueUnpacker(objectToUnpack,category){const{WeakMap,eval}=jsThis._closure;{let workletsCache=global.__workletsCache;let handleCache=global.__handleCache;if(workletsCache===undefined){workletsCache=global.__workletsCache=new Map();handleCache=global.__handleCache=new WeakMap();}const workletHash=objectToUnpack.__workletHash;if(workletHash!==undefined){let workletFun=workletsCache.get(workletHash);if(workletFun===undefined){const initData=objectToUnpack.__initData;if(global.evalWithSourceMap){workletFun=global.evalWithSourceMap('('+initData.code+'\\\\n)',initData.location,initData.sourceMap);}else if(global.evalWithSourceUrl){workletFun=global.evalWithSourceUrl('('+initData.code+'\\\\n)',\\\"worklet_\\\"+workletHash);}else{workletFun=eval('('+initData.code+'\\\\n)');}workletsCache.set(workletHash,workletFun);}const functionInstance=workletFun.bind(objectToUnpack);objectToUnpack._recur=functionInstance;return functionInstance;}else if(objectToUnpack.__init){let value=handleCache.get(objectToUnpack);if(value===undefined){value=objectToUnpack.__init();handleCache.set(objectToUnpack,value);}return value;}else if(category==='RemoteFunction'){const fun=function(){throw new Error(\\\"Tried to synchronously call a non-worklet function on the UI thread.\\\\n\\\\nPossible solutions are:\\\\n  a) If you want to synchronously execute this method, mark it as a worklet\\\\n  b) If you want to execute this function on the JS thread, wrap it using `runOnJS`\\\");};fun.__remoteFunction=objectToUnpack;return fun;}else{throw new Error('data type not recognized by unpack method');}}}\";\n  _f.__workletHash = 11338061350671;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js (23:0)\";\n  return _f;\n}();\nvar setupRequestAnimationFrame = function () {\n  var _f = function _f() {\n    var nativeRequestAnimationFrame = global.requestAnimationFrame;\n    var animationFrameCallbacks = [];\n    var lastNativeAnimationFrameTimestamp = -1;\n    global.__flushAnimationFrame = function (frameTimestamp) {\n      var currentCallbacks = animationFrameCallbacks;\n      animationFrameCallbacks = [];\n      currentCallbacks.forEach(function (f) {\n        return f(frameTimestamp);\n      });\n      callMicrotasks();\n    };\n    global.requestAnimationFrame = function (callback) {\n      animationFrameCallbacks.push(callback);\n      if (animationFrameCallbacks.length === 1) {\n        nativeRequestAnimationFrame(function (timestamp) {\n          if (lastNativeAnimationFrameTimestamp >= timestamp) {\n            return;\n          }\n          lastNativeAnimationFrameTimestamp = timestamp;\n          global.__frameTimestamp = timestamp;\n          global.__flushAnimationFrame(timestamp);\n          global.__frameTimestamp = undefined;\n        });\n      }\n      return -1;\n    };\n  };\n  _f._closure = {\n    callMicrotasks: callMicrotasks\n  };\n  _f.asString = \"function setupRequestAnimationFrame(){const{callMicrotasks}=jsThis._closure;{const nativeRequestAnimationFrame=global.requestAnimationFrame;let animationFrameCallbacks=[];let lastNativeAnimationFrameTimestamp=-1;global.__flushAnimationFrame=function(frameTimestamp){const currentCallbacks=animationFrameCallbacks;animationFrameCallbacks=[];currentCallbacks.forEach(function(f){return f(frameTimestamp);});callMicrotasks();};global.requestAnimationFrame=function(callback){animationFrameCallbacks.push(callback);if(animationFrameCallbacks.length===1){nativeRequestAnimationFrame(function(timestamp){if(lastNativeAnimationFrameTimestamp>=timestamp){return;}lastNativeAnimationFrameTimestamp=timestamp;global.__frameTimestamp=timestamp;global.__flushAnimationFrame(timestamp);global.__frameTimestamp=undefined;});}return-1;};}}\";\n  _f.__workletHash = 10798091946197;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js (81:0)\";\n  return _f;\n}();\nexport function initializeUIRuntime() {\n  NativeReanimatedModule.installCoreFunctions(callGuardDEV, valueUnpacker);\n  var IS_JEST = isJest();\n  if (IS_JEST) {\n    global.requestAnimationFrame = function (callback) {\n      return setTimeout(function () {\n        return callback(performance.now());\n      }, 0);\n    };\n  }\n  var capturableConsole = _objectSpread({}, console);\n  runOnUIImmediately(function () {\n    var _f = function _f() {\n      global.__ErrorUtils = {\n        reportFatalError: function reportFatalError(error) {\n          runOnJS(reportFatalErrorOnJS)({\n            message: error.message,\n            stack: error.stack\n          });\n        }\n      };\n      global.console = {\n        assert: runOnJS(capturableConsole.assert),\n        debug: runOnJS(capturableConsole.debug),\n        log: runOnJS(capturableConsole.log),\n        warn: runOnJS(capturableConsole.warn),\n        error: runOnJS(capturableConsole.error),\n        info: runOnJS(capturableConsole.info)\n      };\n      if (!IS_JEST) {\n        setupMicrotasks();\n        setupRequestAnimationFrame();\n      }\n    };\n    _f._closure = {\n      runOnJS: runOnJS,\n      reportFatalErrorOnJS: reportFatalErrorOnJS,\n      capturableConsole: {\n        assert: capturableConsole.assert,\n        debug: capturableConsole.debug,\n        log: capturableConsole.log,\n        warn: capturableConsole.warn,\n        error: capturableConsole.error,\n        info: capturableConsole.info\n      },\n      IS_JEST: IS_JEST,\n      setupMicrotasks: setupMicrotasks,\n      setupRequestAnimationFrame: setupRequestAnimationFrame\n    };\n    _f.asString = \"function _f(){const{runOnJS,reportFatalErrorOnJS,capturableConsole,IS_JEST,setupMicrotasks,setupRequestAnimationFrame}=jsThis._closure;{global.__ErrorUtils={reportFatalError:function(error){runOnJS(reportFatalErrorOnJS)({message:error.message,stack:error.stack});}};global.console={assert:runOnJS(capturableConsole.assert),debug:runOnJS(capturableConsole.debug),log:runOnJS(capturableConsole.log),warn:runOnJS(capturableConsole.warn),error:runOnJS(capturableConsole.error),info:runOnJS(capturableConsole.info)};if(!IS_JEST){setupMicrotasks();setupRequestAnimationFrame();}}}\";\n    _f.__workletHash = 11235226283476;\n    _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.js (139:21)\";\n    return _f;\n  }())();\n}","map":{"version":3,"names":["reportFatalErrorOnJS","NativeReanimatedModule","isJest","runOnJS","setupMicrotasks","callMicrotasks","runOnUIImmediately","callGuardDEV","_f","fn","_len","arguments","length","args","Array","_key","apply","e","global","__ErrorUtils","reportFatalError","_closure","asString","__workletHash","__location","valueUnpacker","objectToUnpack","category","workletsCache","__workletsCache","handleCache","__handleCache","undefined","Map","WeakMap","workletHash","workletFun","get","initData","__initData","evalWithSourceMap","code","location","sourceMap","evalWithSourceUrl","eval","set","functionInstance","bind","_recur","__init","value","fun","Error","__remoteFunction","setupRequestAnimationFrame","nativeRequestAnimationFrame","requestAnimationFrame","animationFrameCallbacks","lastNativeAnimationFrameTimestamp","__flushAnimationFrame","frameTimestamp","currentCallbacks","forEach","f","callback","push","timestamp","__frameTimestamp","initializeUIRuntime","installCoreFunctions","IS_JEST","setTimeout","performance","now","capturableConsole","_objectSpread","console","error","message","stack","assert","debug","log","warn","info"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/initializers.ts"],"sourcesContent":["import { reportFatalErrorOnJS } from './errors';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isJest } from './PlatformChecker';\nimport {\n  runOnJS,\n  setupMicrotasks,\n  callMicrotasks,\n  runOnUIImmediately,\n} from './threads';\n\n// callGuard is only used with debug builds\nfunction callGuardDEV<T extends Array<any>, U>(\n  fn: (...args: T) => U,\n  ...args: T\n): void {\n  'worklet';\n  try {\n    fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e as Error);\n    } else {\n      throw e;\n    }\n  }\n}\n\nfunction valueUnpacker(objectToUnpack: any, category?: string): any {\n  'worklet';\n  let workletsCache = global.__workletsCache;\n  let handleCache = global.__handleCache;\n  if (workletsCache === undefined) {\n    // init\n    workletsCache = global.__workletsCache = new Map();\n    handleCache = global.__handleCache = new WeakMap();\n  }\n  const workletHash = objectToUnpack.__workletHash;\n  if (workletHash !== undefined) {\n    let workletFun = workletsCache.get(workletHash);\n    if (workletFun === undefined) {\n      const initData = objectToUnpack.__initData;\n      if (global.evalWithSourceMap) {\n        // if the runtime (hermes only for now) supports loading source maps\n        // we want to use the proper filename for the location as it guarantees\n        // that debugger understands and loads the source code of the file where\n        // the worklet is defined.\n        workletFun = global.evalWithSourceMap(\n          '(' + initData.code + '\\n)',\n          initData.location,\n          initData.sourceMap\n        ) as (...args: any[]) => any;\n      } else if (global.evalWithSourceUrl) {\n        // if the runtime doesn't support loading source maps, in dev mode we\n        // can pass source url when evaluating the worklet. Now, instead of using\n        // the actual file location we use worklet hash, as it the allows us to\n        // properly symbolicate traces (see errors.ts for details)\n        workletFun = global.evalWithSourceUrl(\n          '(' + initData.code + '\\n)',\n          `worklet_${workletHash}`\n        ) as (...args: any[]) => any;\n      } else {\n        // in release we use the regular eval to save on JSI calls\n        // eslint-disable-next-line no-eval\n        workletFun = eval('(' + initData.code + '\\n)') as (\n          ...args: any[]\n        ) => any;\n      }\n      workletsCache.set(workletHash, workletFun);\n    }\n    const functionInstance = workletFun.bind(objectToUnpack);\n    objectToUnpack._recur = functionInstance;\n    return functionInstance;\n  } else if (objectToUnpack.__init) {\n    let value = handleCache!.get(objectToUnpack);\n    if (value === undefined) {\n      value = objectToUnpack.__init();\n      handleCache!.set(objectToUnpack, value);\n    }\n    return value;\n  } else if (category === 'RemoteFunction') {\n    const fun = () => {\n      throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.\n\nPossible solutions are:\n  a) If you want to synchronously execute this method, mark it as a worklet\n  b) If you want to execute this function on the JS thread, wrap it using \\`runOnJS\\``);\n    };\n    fun.__remoteFunction = objectToUnpack;\n    return fun;\n  } else {\n    throw new Error('data type not recognized by unpack method');\n  }\n}\n\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n\n  let animationFrameCallbacks: Array<(timestamp: number) => void> = [];\n  let lastNativeAnimationFrameTimestamp = -1;\n\n  global.__flushAnimationFrame = (frameTimestamp: number) => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach((f) => f(frameTimestamp));\n    callMicrotasks();\n  };\n\n  global.requestAnimationFrame = (\n    callback: (timestamp: number) => void\n  ): number => {\n    animationFrameCallbacks.push(callback);\n    if (animationFrameCallbacks.length === 1) {\n      // We schedule native requestAnimationFrame only when the first callback\n      // is added and then use it to execute all the enqueued callbacks. Once\n      // the callbacks are run, we clear the array.\n      nativeRequestAnimationFrame((timestamp) => {\n        if (lastNativeAnimationFrameTimestamp >= timestamp) {\n          // Make sure we only execute the callbacks once for a given frame\n          return;\n        }\n        lastNativeAnimationFrameTimestamp = timestamp;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\n\nexport function initializeUIRuntime() {\n  NativeReanimatedModule.installCoreFunctions(callGuardDEV, valueUnpacker);\n\n  const IS_JEST = isJest();\n\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    global.requestAnimationFrame = (callback: (timestamp: number) => void) => {\n      return setTimeout(() => callback(performance.now()), 0);\n    };\n  }\n\n  // We really have to create a copy of console here. Function runOnJS we use on elements inside\n  // this object makes it not configurable\n  const capturableConsole = { ...console };\n  runOnUIImmediately(() => {\n    'worklet';\n    // setup error handler\n    global.__ErrorUtils = {\n      reportFatalError: (error: Error) => {\n        runOnJS(reportFatalErrorOnJS)({\n          message: error.message,\n          stack: error.stack,\n        });\n      },\n    };\n\n    // setup console\n    // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n    global.console = {\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info),\n    };\n\n    if (!IS_JEST) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}