{"ast":null,"code":"import { defineAnimation } from \"./util\";\nimport { withTiming } from \"./timing\";\nimport { ColorProperties } from \"../UpdateProps\";\nimport { processColor } from \"../Colors\";\nexport var resolvePath = function () {\n  var _f = function _f(obj, path) {\n    var keys = Array.isArray(path) ? path : [path];\n    return keys.reduce(function (acc, current) {\n      if (Array.isArray(acc) && typeof current === 'number') {\n        return acc[current];\n      } else if (acc !== null && typeof acc === 'object' && current in acc) {\n        return acc[current];\n      }\n      return undefined;\n    }, obj);\n  };\n  _f._closure = {};\n  _f.asString = \"function resolvePath(obj,path){const keys=Array.isArray(path)?path:[path];return keys.reduce(function(acc,current){if(Array.isArray(acc)&&typeof current==='number'){return acc[current];}else if(acc!==null&&typeof acc==='object'&&current in acc){return acc[current];}return undefined;},obj);}\";\n  _f.__workletHash = 2297150180059;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/animation/styleAnimation.js (8:7)\";\n  return _f;\n}();\nexport var setPath = function () {\n  var _f = function _f(obj, path, value) {\n    var keys = Array.isArray(path) ? path : [path];\n    var currObj = obj;\n    for (var i = 0; i < keys.length - 1; i++) {\n      currObj = currObj;\n      if (!(keys[i] in currObj)) {\n        if (typeof keys[i + 1] === 'number') {\n          currObj[keys[i]] = [];\n        } else {\n          currObj[keys[i]] = {};\n        }\n      }\n      currObj = currObj[keys[i]];\n    }\n    currObj[keys[keys.length - 1]] = value;\n  };\n  _f._closure = {};\n  _f.asString = \"function setPath(obj,path,value){const keys=Array.isArray(path)?path:[path];let currObj=obj;for(let i=0;i<keys.length-1;i++){currObj=currObj;if(!(keys[i]in currObj)){if(typeof keys[i+1]==='number'){currObj[keys[i]]=[];}else{currObj[keys[i]]={};}}currObj=currObj[keys[i]];}currObj[keys[keys.length-1]]=value;}\";\n  _f.__workletHash = 17315725778859;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/animation/styleAnimation.js (24:7)\";\n  return _f;\n}();\nexport var withStyleAnimation = function () {\n  var _f = function _f(styleAnimations) {\n    return defineAnimation({}, function () {\n      var _f = function _f() {\n        var onFrame = function onFrame(animation, now) {\n          var stillGoing = false;\n          var entriesToCheck = [{\n            value: animation.styleAnimations,\n            path: []\n          }];\n          while (entriesToCheck.length > 0) {\n            var currentEntry = entriesToCheck.pop();\n            if (Array.isArray(currentEntry.value)) {\n              for (var index = 0; index < currentEntry.value.length; index++) {\n                entriesToCheck.push({\n                  value: currentEntry.value[index],\n                  path: currentEntry.path.concat(index)\n                });\n              }\n            } else if (typeof currentEntry.value === 'object' && currentEntry.value.onFrame === undefined) {\n              for (var key of Object.keys(currentEntry.value)) {\n                entriesToCheck.push({\n                  value: currentEntry.value[key],\n                  path: currentEntry.path.concat(key)\n                });\n              }\n            } else {\n              var currentStyleAnimation = currentEntry.value;\n              if (currentStyleAnimation.finished) {\n                continue;\n              }\n              var finished = currentStyleAnimation.onFrame(currentStyleAnimation, now);\n              if (finished) {\n                currentStyleAnimation.finished = true;\n                if (currentStyleAnimation.callback) {\n                  currentStyleAnimation.callback(true);\n                }\n              } else {\n                stillGoing = true;\n              }\n              if (ColorProperties.includes(currentEntry.path[0])) {\n                currentStyleAnimation.current = processColor(currentStyleAnimation.current);\n              }\n              setPath(animation.current, currentEntry.path, currentStyleAnimation.current);\n            }\n          }\n          return !stillGoing;\n        };\n        var onStart = function onStart(animation, value, now, previousAnimation) {\n          var entriesToCheck = [{\n            value: styleAnimations,\n            path: []\n          }];\n          while (entriesToCheck.length > 0) {\n            var currentEntry = entriesToCheck.pop();\n            if (Array.isArray(currentEntry.value)) {\n              for (var index = 0; index < currentEntry.value.length; index++) {\n                entriesToCheck.push({\n                  value: currentEntry.value[index],\n                  path: currentEntry.path.concat(index)\n                });\n              }\n            } else if (typeof currentEntry.value === 'object' && currentEntry.value.onStart === undefined) {\n              for (var key of Object.keys(currentEntry.value)) {\n                entriesToCheck.push({\n                  value: currentEntry.value[key],\n                  path: currentEntry.path.concat(key)\n                });\n              }\n            } else {\n              var prevAnimation = resolvePath(previousAnimation === null || previousAnimation === void 0 ? void 0 : previousAnimation.styleAnimations, currentEntry.path);\n              var prevVal = resolvePath(value, currentEntry.path);\n              if (prevAnimation && !prevVal) {\n                prevVal = prevAnimation.current;\n              }\n              if (prevVal === undefined) {\n                console.warn(\"Initial values for animation are missing for property \" + currentEntry.path.join('.'));\n              }\n              setPath(animation.current, currentEntry.path, prevVal);\n              var currentAnimation = void 0;\n              if (typeof currentEntry.value !== 'object' || !currentEntry.value.onStart) {\n                currentAnimation = withTiming(currentEntry.value, {\n                  duration: 0\n                });\n                setPath(animation.styleAnimations, currentEntry.path, currentAnimation);\n              } else {\n                currentAnimation = currentEntry.value;\n              }\n              currentAnimation.onStart(currentAnimation, prevVal, now, prevAnimation);\n            }\n          }\n        };\n        var callback = function callback(finished) {\n          if (!finished) {\n            var animationsToCheck = [styleAnimations];\n            while (animationsToCheck.length > 0) {\n              var currentAnimation = animationsToCheck.pop();\n              if (Array.isArray(currentAnimation)) {\n                for (var element of currentAnimation) {\n                  animationsToCheck.push(element);\n                }\n              } else if (typeof currentAnimation === 'object' && currentAnimation.onStart === undefined) {\n                for (var value of Object.values(currentAnimation)) {\n                  animationsToCheck.push(value);\n                }\n              } else {\n                var currentStyleAnimation = currentAnimation;\n                if (!currentStyleAnimation.finished && currentStyleAnimation.callback) {\n                  currentStyleAnimation.callback(false);\n                }\n              }\n            }\n          }\n        };\n        return {\n          isHigherOrder: true,\n          onFrame: onFrame,\n          onStart: onStart,\n          current: {},\n          styleAnimations: styleAnimations,\n          callback: callback\n        };\n      };\n      _f._closure = {\n        ColorProperties: ColorProperties,\n        processColor: processColor,\n        setPath: setPath,\n        styleAnimations: styleAnimations,\n        resolvePath: resolvePath,\n        withTiming: withTiming\n      };\n      _f.asString = \"function _f(){const{ColorProperties,processColor,setPath,styleAnimations,resolvePath,withTiming}=jsThis._closure;{const onFrame=function(animation,now){let stillGoing=false;const entriesToCheck=[{value:animation.styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onFrame===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const currentStyleAnimation=currentEntry.value;if(currentStyleAnimation.finished){continue;}const finished=currentStyleAnimation.onFrame(currentStyleAnimation,now);if(finished){currentStyleAnimation.finished=true;if(currentStyleAnimation.callback){currentStyleAnimation.callback(true);}}else{stillGoing=true;}if(ColorProperties.includes(currentEntry.path[0])){currentStyleAnimation.current=processColor(currentStyleAnimation.current);}setPath(animation.current,currentEntry.path,currentStyleAnimation.current);}}return!stillGoing;};const onStart=function(animation,value,now,previousAnimation){const entriesToCheck=[{value:styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onStart===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const prevAnimation=resolvePath(previousAnimation===null||previousAnimation===void 0?void 0:previousAnimation.styleAnimations,currentEntry.path);let prevVal=resolvePath(value,currentEntry.path);if(prevAnimation&&!prevVal){prevVal=prevAnimation.current;}if(prevVal===undefined){console.warn(\\\"Initial values for animation are missing for property \\\"+currentEntry.path.join('.'));}setPath(animation.current,currentEntry.path,prevVal);let currentAnimation;if(typeof currentEntry.value!=='object'||!currentEntry.value.onStart){currentAnimation=withTiming(currentEntry.value,{duration:0});setPath(animation.styleAnimations,currentEntry.path,currentAnimation);}else{currentAnimation=currentEntry.value;}currentAnimation.onStart(currentAnimation,prevVal,now,prevAnimation);}}};const callback=function(finished){if(!finished){const animationsToCheck=[styleAnimations];while(animationsToCheck.length>0){const currentAnimation=animationsToCheck.pop();if(Array.isArray(currentAnimation)){for(const element of currentAnimation){animationsToCheck.push(element);}}else if(typeof currentAnimation==='object'&&currentAnimation.onStart===undefined){for(const value of Object.values(currentAnimation)){animationsToCheck.push(value);}}else{const currentStyleAnimation=currentAnimation;if(!currentStyleAnimation.finished&&currentStyleAnimation.callback){currentStyleAnimation.callback(false);}}}}};return{isHigherOrder:true,onFrame:onFrame,onStart:onStart,current:{},styleAnimations:styleAnimations,callback:callback};}}\";\n      _f.__workletHash = 16217306184372;\n      _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/animation/styleAnimation.js (47:29)\";\n      return _f;\n    }());\n  };\n  _f._closure = {\n    defineAnimation: defineAnimation,\n    ColorProperties: ColorProperties,\n    processColor: processColor,\n    setPath: setPath,\n    resolvePath: resolvePath,\n    withTiming: withTiming\n  };\n  _f.asString = \"function withStyleAnimation(styleAnimations){const{defineAnimation,ColorProperties,processColor,setPath,resolvePath,withTiming}=jsThis._closure;{return defineAnimation({},function(){'worklet';const onFrame=function(animation,now){let stillGoing=false;const entriesToCheck=[{value:animation.styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onFrame===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const currentStyleAnimation=currentEntry.value;if(currentStyleAnimation.finished){continue;}const finished=currentStyleAnimation.onFrame(currentStyleAnimation,now);if(finished){currentStyleAnimation.finished=true;if(currentStyleAnimation.callback){currentStyleAnimation.callback(true);}}else{stillGoing=true;}if(ColorProperties.includes(currentEntry.path[0])){currentStyleAnimation.current=processColor(currentStyleAnimation.current);}setPath(animation.current,currentEntry.path,currentStyleAnimation.current);}}return!stillGoing;};const onStart=function(animation,value,now,previousAnimation){const entriesToCheck=[{value:styleAnimations,path:[]}];while(entriesToCheck.length>0){const currentEntry=entriesToCheck.pop();if(Array.isArray(currentEntry.value)){for(let index=0;index<currentEntry.value.length;index++){entriesToCheck.push({value:currentEntry.value[index],path:currentEntry.path.concat(index)});}}else if(typeof currentEntry.value==='object'&&currentEntry.value.onStart===undefined){for(const key of Object.keys(currentEntry.value)){entriesToCheck.push({value:currentEntry.value[key],path:currentEntry.path.concat(key)});}}else{const prevAnimation=resolvePath(previousAnimation===null||previousAnimation===void 0?void 0:previousAnimation.styleAnimations,currentEntry.path);let prevVal=resolvePath(value,currentEntry.path);if(prevAnimation&&!prevVal){prevVal=prevAnimation.current;}if(prevVal===undefined){console.warn(\\\"Initial values for animation are missing for property \\\"+currentEntry.path.join('.'));}setPath(animation.current,currentEntry.path,prevVal);let currentAnimation;if(typeof currentEntry.value!=='object'||!currentEntry.value.onStart){currentAnimation=withTiming(currentEntry.value,{duration:0});setPath(animation.styleAnimations,currentEntry.path,currentAnimation);}else{currentAnimation=currentEntry.value;}currentAnimation.onStart(currentAnimation,prevVal,now,prevAnimation);}}};const callback=function(finished){if(!finished){const animationsToCheck=[styleAnimations];while(animationsToCheck.length>0){const currentAnimation=animationsToCheck.pop();if(Array.isArray(currentAnimation)){for(const element of currentAnimation){animationsToCheck.push(element);}}else if(typeof currentAnimation==='object'&&currentAnimation.onStart===undefined){for(const value of Object.values(currentAnimation)){animationsToCheck.push(value);}}else{const currentStyleAnimation=currentAnimation;if(!currentStyleAnimation.finished&&currentStyleAnimation.callback){currentStyleAnimation.callback(false);}}}}};return{isHigherOrder:true,onFrame:onFrame,onStart:onStart,current:{},styleAnimations:styleAnimations,callback:callback};});}}\";\n  _f.__workletHash = 5859144058646;\n  _f.__location = \"/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/animation/styleAnimation.js (44:7)\";\n  return _f;\n}();","map":{"version":3,"names":["defineAnimation","withTiming","ColorProperties","processColor","resolvePath","_f","obj","path","keys","Array","isArray","reduce","acc","current","undefined","_closure","asString","__workletHash","__location","setPath","value","currObj","i","length","withStyleAnimation","styleAnimations","onFrame","animation","now","stillGoing","entriesToCheck","currentEntry","pop","index","push","concat","key","Object","currentStyleAnimation","finished","callback","includes","onStart","previousAnimation","prevAnimation","prevVal","console","warn","join","currentAnimation","duration","animationsToCheck","element","values","isHigherOrder"],"sources":["/cs/home/sz78/Documents/P4_expo/node_modules/react-native-reanimated/lib/module/reanimated2/animation/styleAnimation.ts"],"sourcesContent":["import { defineAnimation } from './util';\nimport {\n  Timestamp,\n  AnimatableValue,\n  AnimationObject,\n  Animation,\n  AnimatedStyle,\n  NestedObject,\n  NestedObjectValues,\n} from '../commonTypes';\nimport { StyleLayoutAnimation } from './commonTypes';\nimport { withTiming } from './timing';\nimport { ColorProperties } from '../UpdateProps';\nimport { processColor } from '../Colors';\n\n// resolves path to value for nested objects\n// if path cannot be resolved returns undefined\nexport function resolvePath<T>(\n  obj: NestedObject<T>,\n  path: AnimatableValue[] | AnimatableValue\n): NestedObjectValues<T> | undefined {\n  'worklet';\n  const keys: AnimatableValue[] = Array.isArray(path) ? path : [path];\n  return keys.reduce<NestedObjectValues<T> | undefined>((acc, current) => {\n    if (Array.isArray(acc) && typeof current === 'number') {\n      return acc[current];\n    } else if (\n      acc !== null &&\n      typeof acc === 'object' &&\n      (current as number | string) in acc\n    ) {\n      return (acc as { [key: string]: NestedObjectValues<T> })[\n        current as number | string\n      ];\n    }\n    return undefined;\n  }, obj);\n}\n\n// set value at given path\ntype Path = Array<string | number> | string | number;\nexport function setPath<T>(\n  obj: NestedObject<T>,\n  path: Path,\n  value: NestedObjectValues<T>\n): void {\n  'worklet';\n  const keys: Path = Array.isArray(path) ? path : [path];\n  let currObj: NestedObjectValues<T> = obj;\n  for (let i = 0; i < keys.length - 1; i++) {\n    // creates entry if there isn't one\n    currObj = currObj as { [key: string]: NestedObjectValues<T> };\n    if (!(keys[i] in currObj)) {\n      // if next key is a number create an array\n      if (typeof keys[i + 1] === 'number') {\n        currObj[keys[i]] = [];\n      } else {\n        currObj[keys[i]] = {};\n      }\n    }\n    currObj = currObj[keys[i]];\n  }\n\n  (currObj as { [key: string]: NestedObjectValues<T> })[keys[keys.length - 1]] =\n    value;\n}\n\ninterface NestedObjectEntry<T> {\n  value: NestedObjectValues<T>;\n  path: (string | number)[];\n}\n\nexport function withStyleAnimation(\n  styleAnimations: AnimatedStyle\n): StyleLayoutAnimation {\n  'worklet';\n  return defineAnimation<StyleLayoutAnimation>({}, () => {\n    'worklet';\n\n    const onFrame = (\n      animation: StyleLayoutAnimation,\n      now: Timestamp\n    ): boolean => {\n      let stillGoing = false;\n      const entriesToCheck: NestedObjectEntry<AnimationObject>[] = [\n        { value: animation.styleAnimations, path: [] },\n      ];\n      while (entriesToCheck.length > 0) {\n        const currentEntry: NestedObjectEntry<AnimationObject> =\n          entriesToCheck.pop() as NestedObjectEntry<AnimationObject>;\n        if (Array.isArray(currentEntry.value)) {\n          for (let index = 0; index < currentEntry.value.length; index++) {\n            entriesToCheck.push({\n              value: currentEntry.value[index],\n              path: currentEntry.path.concat(index),\n            });\n          }\n        } else if (\n          typeof currentEntry.value === 'object' &&\n          currentEntry.value.onFrame === undefined\n        ) {\n          // nested object\n          for (const key of Object.keys(currentEntry.value)) {\n            entriesToCheck.push({\n              value: currentEntry.value[key],\n              path: currentEntry.path.concat(key),\n            });\n          }\n        } else {\n          const currentStyleAnimation: AnimationObject =\n            currentEntry.value as AnimationObject;\n          if (currentStyleAnimation.finished) {\n            continue;\n          }\n          const finished = currentStyleAnimation.onFrame(\n            currentStyleAnimation,\n            now\n          );\n          if (finished) {\n            currentStyleAnimation.finished = true;\n            if (currentStyleAnimation.callback) {\n              currentStyleAnimation.callback(true);\n            }\n          } else {\n            stillGoing = true;\n          }\n\n          if (ColorProperties.includes(currentEntry.path[0] as string)) {\n            currentStyleAnimation.current = processColor(\n              currentStyleAnimation.current\n            ) as number;\n          }\n\n          setPath(\n            animation.current,\n            currentEntry.path,\n            currentStyleAnimation.current\n          );\n        }\n      }\n      return !stillGoing;\n    };\n\n    const onStart = (\n      animation: StyleLayoutAnimation,\n      value: AnimatedStyle,\n      now: Timestamp,\n      previousAnimation: StyleLayoutAnimation\n    ): void => {\n      const entriesToCheck: NestedObjectEntry<\n        AnimationObject | AnimatableValue\n      >[] = [{ value: styleAnimations, path: [] }];\n      while (entriesToCheck.length > 0) {\n        const currentEntry: NestedObjectEntry<\n          AnimationObject | AnimatableValue\n        > = entriesToCheck.pop() as NestedObjectEntry<\n          AnimationObject | AnimatableValue\n        >;\n        if (Array.isArray(currentEntry.value)) {\n          for (let index = 0; index < currentEntry.value.length; index++) {\n            entriesToCheck.push({\n              value: currentEntry.value[index],\n              path: currentEntry.path.concat(index),\n            });\n          }\n        } else if (\n          typeof currentEntry.value === 'object' &&\n          currentEntry.value.onStart === undefined\n        ) {\n          for (const key of Object.keys(currentEntry.value)) {\n            entriesToCheck.push({\n              value: currentEntry.value[key],\n              path: currentEntry.path.concat(key),\n            });\n          }\n        } else {\n          const prevAnimation = resolvePath(\n            previousAnimation?.styleAnimations,\n            currentEntry.path\n          );\n          let prevVal = resolvePath(value, currentEntry.path);\n          if (prevAnimation && !prevVal) {\n            prevVal = prevAnimation.current;\n          }\n          if (prevVal === undefined) {\n            console.warn(\n              `Initial values for animation are missing for property ${currentEntry.path.join(\n                '.'\n              )}`\n            );\n          }\n          setPath(animation.current, currentEntry.path, prevVal);\n          let currentAnimation: AnimationObject;\n          if (\n            typeof currentEntry.value !== 'object' ||\n            !currentEntry.value.onStart\n          ) {\n            currentAnimation = withTiming(\n              currentEntry.value as AnimatableValue,\n              { duration: 0 }\n            );\n            setPath(\n              animation.styleAnimations,\n              currentEntry.path,\n              currentAnimation\n            );\n          } else {\n            currentAnimation = currentEntry.value as Animation<AnimationObject>;\n          }\n          currentAnimation.onStart(\n            currentAnimation,\n            prevVal,\n            now,\n            prevAnimation\n          );\n        }\n      }\n    };\n\n    const callback = (finished: boolean): void => {\n      if (!finished) {\n        const animationsToCheck: NestedObjectValues<AnimationObject>[] = [\n          styleAnimations,\n        ];\n        while (animationsToCheck.length > 0) {\n          const currentAnimation: NestedObjectValues<AnimationObject> =\n            animationsToCheck.pop() as NestedObjectValues<AnimationObject>;\n          if (Array.isArray(currentAnimation)) {\n            for (const element of currentAnimation) {\n              animationsToCheck.push(element);\n            }\n          } else if (\n            typeof currentAnimation === 'object' &&\n            currentAnimation.onStart === undefined\n          ) {\n            for (const value of Object.values(currentAnimation)) {\n              animationsToCheck.push(value);\n            }\n          } else {\n            const currentStyleAnimation: AnimationObject =\n              currentAnimation as AnimationObject;\n            if (\n              !currentStyleAnimation.finished &&\n              currentStyleAnimation.callback\n            ) {\n              currentStyleAnimation.callback(false);\n            }\n          }\n        }\n      }\n    };\n\n    return {\n      isHigherOrder: true,\n      onFrame,\n      onStart,\n      current: {},\n      styleAnimations,\n      callback,\n    } as StyleLayoutAnimation;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}